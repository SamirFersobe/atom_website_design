"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const runWhenVisible_1 = __importDefault(require("./runWhenVisible"));
let observer;
const watchConfigs = new Set();
/**
 * Sets up observers to watch for elements matching the list of selectors, then
 * perform the given callback when an element becomes visible
 * @param {PrefetchWatcherConfig[]} configArr Contains the list of selector/callback pairs
 */
function watchElements(configArr) {
    /* istanbul ignore next */
    if (typeof MutationObserver === 'undefined')
        return;
    if (!configArr || !configArr.length)
        return;
    configArr.forEach(watch => watchConfigs.add(watch));
    if (!observer) {
        observer = new MutationObserver(mutationsList => {
            for (let mutation of mutationsList) {
                ;
                [...watchConfigs].forEach(watch => {
                    filterBySelector(mutation.addedNodes, watch.selector).forEach(match => runWhenVisible_1.default(match, watch.callback));
                });
            }
        });
    }
    observer.observe(document.body, {
        subtree: true,
        childList: true,
    });
    configArr.forEach(watch => {
        document.querySelectorAll(watch.selector).forEach(match => {
            const el = match;
            runWhenVisible_1.default(el, watch.callback);
        });
    });
}
exports.default = watchElements;
/**
 * Returns all nodes in the node list that match one of the given selectors
 * @param {NodeList} nodes A node list to filter
 * @param {String} selector Selector used to match elements
 */
function filterBySelector(nodes, selector) {
    const results = new Set();
    Array.from(nodes).forEach(n => {
        if (n.nodeType === Node.ELEMENT_NODE) {
            const el = n;
            if (el.matches(selector)) {
                results.add(el);
            }
            else {
                const matches = el.querySelectorAll(selector);
                matches.forEach(match => results.add(match));
            }
        }
    });
    return results;
}
