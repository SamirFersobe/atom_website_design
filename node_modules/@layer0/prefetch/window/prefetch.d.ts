import PrefetchOptions from './PrefetchOptions';
import { HTTPMethod } from '@layer0/core/router/CacheOptions';
/**
 * Object with configuration for prefetch function
 */
export declare type PrefetchConfiguration = {
    /**
     * Sets the body of prefetch request.
     */
    body?: string;
    /**
     * Allows to change default HTTP GET method of prefetch request.
     */
    method?: HTTPMethod;
    /**
     * Allows to change default CORS policy of prefetch request.
     * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-crossorigin
     */
    cors?: false | 'anonymous' | 'use-credentials';
    /**
     * Allows to override the default Prefetch TTL or serviceWorkerSeconds value defined in routes.js.
     * The number represents the seconds for how long the item will be stored in the browser cache.
     */
    maxAgeSeconds?: number;
    /**
     * Allows to override the default includeCacheMisses value from install() function.
     * Set to true to send all requests to origin even when they are not in the Edge cache.
     */
    includeCacheMisses?: boolean;
    /**
     * Allows to override the default forcePrefetchRatio value from install() function.
     * The number represents ratio of requests that are sent to origin even when they are not in the Edge cache.
     * Possible values: Number between 0 and 1. Number 0 is equal to 0% requests and 1 to 100% requests sent to origin.
     */
    forcePrefetchRatio?: number;
};
/**
 * Possible values for the "as" param of prefetch function
 * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-as
 */
export declare type PrefetchAs = 'audio' | 'document' | 'embed' | 'fetch' | 'font' | 'image' | 'object' | 'script' | 'style' | 'track' | 'video' | 'worker' | undefined;
/**
 * Configures prefetching options
 * @param opts
 */
export declare function configure(opts: Partial<PrefetchOptions>): void;
/**
 * Prefetches and caches the specified URL.
 *
 * **Example**
 *
 * ```js
 * import { prefetch } from '@layer0/prefetch/window
 *
 * // Prefetches the URL with default PrefetchConfiguration
 * prefetch('/some/url')
 *
 * // Prefetches the URL as fetch with custom PrefetchConfiguration
 * prefetch('/some/url', "fetch", {
 *     // Overrides the default Prefetch TTL or serviceWorkerSeconds value defined in routes.js
 *     maxAgeSeconds: 300, // 5 minutes
 *
 *     // Allows to override the default forcePrefetchRatio value from install() function
 *     includeCacheMisses: true
 * });
 * ```
 * @param {String} url The URL to prefetch
 * @param {String} as Value to use for the "as" attribute of the <link> tag
 * @param {PrefetchConfiguration} config Options to use for the prefetch
 */
export declare function prefetch(url: string, as?: PrefetchAs, config?: PrefetchConfiguration): Promise<void>;
