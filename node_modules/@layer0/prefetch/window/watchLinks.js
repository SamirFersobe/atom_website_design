"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prefetchWhenVisible_1 = __importDefault(require("./prefetchWhenVisible"));
const CacheManifest_1 = __importDefault(require("@layer0/core/router/CacheManifest"));
const observerDefaults = {
    disabled: false,
    attributes: false,
};
let observer;
const searchedEntries = new Set();
/**
 * Watches the DOM for all current and future links whose href matches one of the
 * specified URL patterns
 * @param {CacheManifest} cacheManifest Regular expressions that will be tested against link href attributes
 * @param {ObserveOptionsConfig} observeOpts Configuration for how the DOM is observed for node changes
 */
function watchLinks(cacheManifest, observerOpts) {
    /* istanbul ignore next */
    if (typeof MutationObserver === 'undefined')
        return;
    cacheManifest.entries.forEach(entry => searchedEntries.add(entry));
    observerOpts = { ...observerDefaults, ...observerOpts };
    if (!observer) {
        observer = new MutationObserver(mutationsList => {
            for (let mutation of mutationsList) {
                filterByHref(mutation.addedNodes, CacheManifest_1.default.fromEntries([...searchedEntries.values()])).forEach(prefetchWhenVisible_1.default);
            }
        });
        if (!observerOpts.disabled) {
            observer.observe(document.body, {
                attributes: observerOpts.attributes,
                childList: true,
                subtree: true,
            });
        }
    }
    filterByHref(document.querySelectorAll('a'), cacheManifest).forEach(prefetchWhenVisible_1.default);
}
exports.default = watchLinks;
/**
 * Returns all nodes in the node list whose href matches at least one of the specified patterns.
 * @param {NodeList} nodes A node list to filter
 * @param {CacheManifest} cacheManifest Contains the list of route patterns to check
 */
function filterByHref(nodes, cacheManifest) {
    const isMatchingLink = (el) => {
        const href = el.getAttribute('href');
        if (!href || el.tagName.toLowerCase() !== 'a') {
            return false;
        }
        return cacheManifest.shouldPrefetch(new URL(href, window.location.href));
    };
    const results = new Set();
    Array.from(nodes).forEach(n => {
        if (n.nodeType === Node.ELEMENT_NODE) {
            const el = n;
            const links = [el, ...Array.from(el.querySelectorAll('a'))];
            links.filter(isMatchingLink).forEach(link => results.add(link));
        }
    });
    return results;
}
