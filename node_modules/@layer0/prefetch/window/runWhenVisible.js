"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Runs a callback function when an element it is visible in the viewport
 * @param {HTMLElement} el The element
 * @param {Function} callback The function to call once the element is visible
 */
function runWhenVisible(el, callback) {
    /* istanbul ignore next */
    if (typeof IntersectionObserver === 'undefined')
        return;
    const observer = new IntersectionObserver(entries => {
        // if intersectionRatio is 0, the element is out of view and we do not need to do anything.
        if (entries[0].intersectionRatio > 0) {
            observer.disconnect();
            callback(el);
        }
    }, {
        // setting this to > 0 to avoid a race condition where an element comes into the
        // viewport at the same time as display/visibility becomes block/visible, and
        // the IntersectionObserver is then only triggered with a ratio of 0
        threshold: 0.01,
    });
    // Note: apparently we don't need to clean these up when the observed node is removed.
    // See https://stackoverflow.com/questions/51106261/should-mutationobservers-be-removed-disconnected-when-the-attached-dom-node-is-r/51106262#51106262
    observer.observe(el);
}
exports.default = runWhenVisible;
