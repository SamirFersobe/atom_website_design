"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prefetch_1 = require("./prefetch");
const registerServiceWorker_1 = require("./registerServiceWorker");
const watchLinks_1 = __importDefault(require("./watchLinks"));
const loadManifest_1 = __importDefault(require("./loadManifest"));
const watchElements_1 = __importDefault(require("./watchElements"));
const CacheManifest_1 = __importDefault(require("@layer0/core/router/CacheManifest"));
const defaults = {
    includeCacheMisses: false,
    cacheHost: undefined,
    forcePrefetchRatio: 0,
};
let swEventListenerAdded = false;
/**
 * Installs the service worker, prefetches any URLs specified in `prefetchURLs` and watches
 * all links whose `href` attribute matches one of the specified `prefetchPatterns`.  When
 * a matching link is visible in the viewport, the destination URL will be prefetched and
 * added to the cache.
 * @param options
 */
async function install(options) {
    options = { ...defaults, ...options };
    const spaRoutes = [];
    const { serviceWorker } = navigator;
    if (typeof serviceWorker === 'undefined') {
        return;
    }
    const { prefetchURLs, watch, serviceWorkerPath = '/service-worker.js', observe } = options;
    await loadManifest_1.default({ cacheHost: options.cacheHost });
    const cacheManifest = CacheManifest_1.default.fromEntries(
    // @ts-ignore
    window.__LAYER0_CACHE_MANIFEST__ || []);
    const prefetchPatterns = [...(options.prefetchPatterns || [])].map(routeRegex => ({
        criteriaPath: routeRegex.source,
        route: routeRegex.source,
        cacheOptions: { edge: { maxAgeSeconds: 1 }, browser: { serviceWorkerSeconds: 1 } },
        returnsResponse: false,
    }));
    spaRoutes.push(...cacheManifest.spaRoutes);
    prefetch_1.configure({ ...options, spaRoutes });
    // install the service worker
    registerServiceWorker_1.registerServiceWorker(serviceWorkerPath);
    // prefetch requested URLs
    prefetchURLs === null || prefetchURLs === void 0 ? void 0 : prefetchURLs.forEach(url => prefetch_1.prefetch(url));
    // watch links currently in the DOM as well as any links that are added in the future
    watchLinks_1.default(cacheManifest, observe); // observer options only needs supplied to the first call since this creates the MutationObserver
    watchLinks_1.default(CacheManifest_1.default.fromEntries(prefetchPatterns));
    watchElements_1.default(watch);
    listenForSwMessages();
}
exports.default = install;
/**
 * Adds event listener for messages sent by service-worker if it wasn't added already
 */
function listenForSwMessages() {
    const { serviceWorker } = navigator;
    // In case service-worker was not registered or eventListener for messages was already added, do nothing
    if (typeof serviceWorker === 'undefined' || swEventListenerAdded) {
        return;
    }
    serviceWorker.addEventListener('message', event => {
        if (event.data.action === 'prefetch') {
            prefetch_1.prefetch(event.data.url, event.data.as, event.data.options);
        }
    });
    swEventListenerAdded = true;
}
exports.listenForSwMessages = listenForSwMessages;
