import PrefetchOptions from './PrefetchOptions';
export interface PrefetchWatcherConfig {
    /**
     * The CSS selector to use when finding elements whose src or href should be deep fetched
     */
    selector: string;
    /**
     * A callback to allow using attributes of the discovered element to be used to prefetch
     * resources as needed.
     */
    callback: (param: HTMLElement) => void;
}
export interface ObserveOptionsConfig {
    /**
     * `true` to disable observation of all DOM nodes for prefetching
     */
    disabled?: boolean;
    /**
     * `true` to observe changes to DOM attributes that may trigger the need to prefetch
     * resources.
     */
    attributes?: boolean;
}
/**
 * Options for the `install` function.
 */
export default interface InstallOptions extends PrefetchOptions {
    /**
     * Any link whose href matches one of these patterns will have its
     * href prefetched when the link becomes visible
     */
    prefetchPatterns?: RegExp[];
    /**
     * URLs to prefetch immediately
     */
    prefetchURLs?: string[];
    /**
     * The Layer0 hostname from which to prefetch cached content.  This is only used when the origin
     * site is not served from Layer0.
     */
    cacheHost?: string;
    /**
     * The URL path on which the service worker is served.
     */
    serviceWorkerPath?: string;
    /**
     * A list of config objects with selectors to watch for. When elements matching the
     * selector are found, the specified callback is called.
     *
     * **Example**
     *
     * install({
     *   watch: [{
     *     selector: 'div.product-tile',
     *     callback: el => {
     *       const productId = el.getAttribute('data-product-id')
     *       const catId = document.getElementById('cat-listing').getAttribute('data-category-id')
     *       prefetch(`/api/${catId}/${productId}`, 'fetch')
     *     }
     *   }]
     * })
     */
    watch?: PrefetchWatcherConfig[];
    /**
     * The prefetcher observes the DOM for new elements that are added for potential
     * prefetching. Observations are made to the document's child nodes and subtree.
     * Attributes changes are not observed by default, but can be enabled with
     * `ObserveOptionsConfig.attributes`. Additionally, you can disable the observer
     * by setting `ObserveOptionsConfig.disabled` to `true`.
     */
    observe?: ObserveOptionsConfig;
    /**
     * The probability that a prefetch request will be relayed to the origin even
     * if a response is not in the cache.  Defaults to 0. This should be a number between 0 and 1.
     */
    forcePrefetchRatio?: number;
}
