/// <reference types="cheerio" />
import { WorkboxPlugin, FetchDidSucceedCallbackParam } from 'workbox-core/types';
import { Options } from 'json-query';
export interface DeepFetchCallbackParam {
    /**
     * The matching element, wrapped in a cheerio instance
     */
    $el: Cheerio;
    /**
     * The matching element
     */
    el: CheerioElement;
    /**
     * The cheerio static instance
     */
    $: CheerioStatic;
    /**
     * The URL of the page that was prefetched
     */
    srcURL: string;
}
interface DeepFetchBaseConfig {
    /**
     * The max number of matching elements to prefetch per page
     */
    maxMatches?: number;
    /**
     * The value for the `<link rel="prefetch|preload">` element's `as` attribute.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link.  Use "fetch" for html pages as Safari doesn't support "document".
     */
    as: 'image' | 'script' | 'style' | 'font' | 'fetch' | 'video';
    /**
     * The value of the `crossorigin` attribute of the prefetch link. Defaults to 'anonymous'. Setting this to `false`
     * makes it so the `crossorigin` attribute is omitted, i.e. no CORS is used.
     */
    cors?: false | 'anonymous' | 'use-credentials';
}
interface DeepFetchHtmlConfig extends DeepFetchBaseConfig {
    /**
     * The CSS selector to use when finding elements whose src or href should be deep fetched
     */
    selector: string;
    /**
     * The attribute whose value should be prefetched. Defaults to `src`.
     */
    attribute: string;
    /**
     * A callback to override the default prefetching logic. Will be called for each matching element,
     * or if `maxMatches` is provided, the first n elements.
     */
    callback?: (param: DeepFetchCallbackParam) => void;
}
interface DeepFetchJsonConfig extends DeepFetchBaseConfig {
    /**
     * A json query to use when finding data within a JSON response that should be deep
     * fetched.
     * Queries are made using the [json-query](https://github.com/auditassistant/json-query)
     * library. Properties returned by the query are expected to be strings; any non-string
     * results are ignored.
     */
    jsonQuery: string;
    /**
     * Options that can be passed to [json-query](https://github.com/auditassistant/json-query#options).
     */
    jsonQueryOptions?: Options;
}
declare type DeepFetchConfig = DeepFetchHtmlConfig | DeepFetchJsonConfig;
/**
 * This plugin deep fetches resources during prefetching based on CSS selectors.
 *
 * ** Example **
 *
 * ```js
 *  import DeepFetchPlugin from '@layer0/prefetch/sw/DeepFetchPlugin'
 *  import { Prefetcher } from '@layer0/prefetch/sw'
 *
 *  new Prefetcher({
 *    plugins: [
 *      new DeepFetchPlugin([
 *        {
 *          selector: 'img.product-main-image,
 *          maxMatches: 1,
 *          as: 'image',
 *          attribute: 'src'
 *        }
 *      ])
 *    ]
 *  })
 * ```
 */
export default class DeepFetchPlugin implements WorkboxPlugin {
    config: DeepFetchConfig[];
    constructor(config: DeepFetchConfig[]);
    get htmlConfigs(): DeepFetchHtmlConfig[];
    get jsonConfigs(): DeepFetchJsonConfig[];
    /**
     * WorkboxPlugin method called every time a fetch succeeds.
     */
    fetchDidSucceed({ request, response }: FetchDidSucceedCallbackParam): Promise<Response>;
    /**
     * Deep fetches elements that match the selectors provided by the user.
     * @param html The document to search
     * @param srcURL URL of the source document
     */
    private deepFetchHtml;
    private deepFetchJson;
}
export {};
