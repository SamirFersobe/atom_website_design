import { WorkboxPlugin, CacheKeyWillBeUsedCallbackParam, CacheWillUpdateCallbackParamParam, RequestWillFetchCallbackParam } from 'workbox-core/types';
export declare function isPrefetchRequest(request: Request): boolean;
export declare function normalizeRequestUrlForCache(request: Request, { cacheHost }?: {
    cacheHost?: URL;
}): Promise<string>;
export default class PrefetchPlugin implements WorkboxPlugin {
    private incrementRead;
    private incrementWrite;
    private cacheHost?;
    private prefetchUpstreamRequests?;
    private convertToGet?;
    private method;
    constructor({ incrementRead, incrementWrite, cacheHost, prefetchUpstreamRequests, convertToGet, method, }: {
        incrementRead: Function;
        incrementWrite: Function;
        cacheHost?: URL;
        prefetchUpstreamRequests?: boolean;
        convertToGet?: boolean;
        method: string;
    });
    requestWillFetch({ request }: RequestWillFetchCallbackParam): Promise<Request>;
    /**
     * Called when an object is read from or written to the cache.  Here we
     * compute cache stats and ensure that ?layer0_prefetch is removed from the cache key so
     * that future requests for prefetched resources will match.
     */
    cacheKeyWillBeUsed({ request, mode }: CacheKeyWillBeUsedCallbackParam): Promise<string>;
    /**
     * Called when a response is about to be written to the cache.
     */
    cacheWillUpdate({ response, request, event }: CacheWillUpdateCallbackParamParam): Promise<Response | null>;
}
