"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CustomCacheKey_1 = require("@layer0/core/router/CustomCacheKey");
const constants_1 = require("@layer0/core/constants");
class CustomCacheKeyPlugin {
    constructor(urls, config) {
        this.route = urls;
        this.config = config;
    }
    urlMatches(url) {
        return this.route.test(url);
    }
    async cacheKeyWillBeUsed({ request }) {
        const url = new URL(request.url);
        if (this.urlMatches(url.pathname)) {
            const url = new URL(request.url);
            this.config.forEach(conf => this.handleKeyConfig(url, conf));
            return url.toString();
        }
        return request;
    }
    handleKeyConfig(url, config) {
        const deleteKeys = [];
        switch (config.action) {
            case CustomCacheKey_1.CUSTOM_CACHE_KEY_ACTIONS.blacklistAll:
                url.searchParams.forEach((value, key) => {
                    deleteKeys.push(key);
                });
                break;
            case CustomCacheKey_1.CUSTOM_CACHE_KEY_ACTIONS.blacklistSome:
                url.searchParams.forEach((value, key) => {
                    if (config.names && config.names.includes(key)) {
                        deleteKeys.push(key);
                    }
                });
                break;
            case CustomCacheKey_1.CUSTOM_CACHE_KEY_ACTIONS.whitelistSome:
                url.searchParams.forEach((value, key) => {
                    if (config.names && !config.names.includes(key)) {
                        deleteKeys.push(key);
                    }
                });
                break;
            case CustomCacheKey_1.CUSTOM_CACHE_KEY_ACTIONS.removeBody:
                url.searchParams.delete(constants_1.POST_BODY_QUERY_PARAM);
                break;
            case CustomCacheKey_1.CUSTOM_CACHE_KEY_ACTIONS.removeMethod:
                url.searchParams.delete(constants_1.METHOD_QUERY_PARAM);
                break;
        }
        deleteKeys.forEach(key => url.searchParams.delete(key));
    }
}
exports.default = CustomCacheKeyPlugin;
