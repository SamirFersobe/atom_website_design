"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cheerio_1 = __importDefault(require("cheerio"));
const prefetch_1 = require("./prefetch");
const log_1 = __importDefault(require("./log"));
const json_query_1 = __importDefault(require("json-query"));
function isHtmlConfig(config) {
    return config.selector !== undefined;
}
function isJsonConfig(config) {
    return config.jsonQuery !== undefined;
}
/**
 * This plugin deep fetches resources during prefetching based on CSS selectors.
 *
 * ** Example **
 *
 * ```js
 *  import DeepFetchPlugin from '@layer0/prefetch/sw/DeepFetchPlugin'
 *  import { Prefetcher } from '@layer0/prefetch/sw'
 *
 *  new Prefetcher({
 *    plugins: [
 *      new DeepFetchPlugin([
 *        {
 *          selector: 'img.product-main-image,
 *          maxMatches: 1,
 *          as: 'image',
 *          attribute: 'src'
 *        }
 *      ])
 *    ]
 *  })
 * ```
 */
class DeepFetchPlugin {
    constructor(config) {
        this.config = config;
    }
    get htmlConfigs() {
        return this.config.filter(isHtmlConfig);
    }
    get jsonConfigs() {
        return this.config.filter(isJsonConfig);
    }
    /**
     * WorkboxPlugin method called every time a fetch succeeds.
     */
    async fetchDidSucceed({ request, response }) {
        try {
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.toLowerCase().includes('text/html')) {
                response
                    .clone()
                    .text()
                    .then(html => this.deepFetchHtml(html, request.url));
            }
            else if (contentType && contentType.toLowerCase().includes('application/json')) {
                response
                    .clone()
                    .json()
                    .then(obj => this.deepFetchJson(obj, request.url));
            }
        }
        finally {
            // need to always return the response here, even if there is an error, or the browser will never get a response from the network
            // eslint-disable-next-line no-unsafe-finally
            return response;
        }
    }
    /**
     * Deep fetches elements that match the selectors provided by the user.
     * @param html The document to search
     * @param srcURL URL of the source document
     */
    async deepFetchHtml(html, srcURL) {
        const $ = cheerio_1.default.load(html);
        for (let { selector, maxMatches, callback, as, attribute = 'src', cors = 'anonymous' } of this
            .htmlConfigs) {
            let matchCount = 0;
            $(selector).each(function () {
                if (maxMatches != null && matchCount >= maxMatches)
                    return;
                if (this.tagName.toLowerCase() === 'a') {
                    log_1.default('warning', 'Deep fetching of html links is not supported.');
                    return;
                }
                const $el = $(this);
                if (callback) {
                    matchCount++;
                    callback({ $el, el: this, $, srcURL });
                }
                else {
                    const url = $el.attr(attribute);
                    if (url) {
                        matchCount++;
                        prefetch_1.prefetch(url, as, { cors });
                    }
                    else {
                        log_1.default(`warning: DeepFetchPlugin found an element matching selector ${selector} which did not have a ${attribute} attribute.`);
                    }
                }
            });
        }
    }
    async deepFetchJson(jsonObj, srcURL) {
        for (let { jsonQuery: query, jsonQueryOptions, maxMatches, as, cors = 'anonymous' } of this
            .jsonConfigs) {
            let matchCount = 0;
            const maybeDeepFetchJsonResult = (result) => {
                if (maxMatches != null && matchCount >= maxMatches)
                    return;
                if (typeof result === 'string') {
                    matchCount++;
                    prefetch_1.prefetch(result, as, { cors });
                }
                else {
                    console.warn(`Unable to deep fetch result: ${result} is not a valid URL string`);
                    return;
                }
            };
            const { value: results } = json_query_1.default(query, {
                data: jsonObj,
                ...jsonQueryOptions,
            });
            if (Array.isArray(results)) {
                results.forEach(result => {
                    maybeDeepFetchJsonResult(result);
                });
            }
            else {
                maybeDeepFetchJsonResult(results);
            }
        }
    }
}
exports.default = DeepFetchPlugin;
