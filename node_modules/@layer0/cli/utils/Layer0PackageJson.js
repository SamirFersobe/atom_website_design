"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const path = require('path');

const {
  MissingLayer0PackagesError
} = require('./errors');

const isEmpty = require('lodash/isEmpty');

const getValue = require('lodash/get');

class Layer0PackageJson {
  /**
   * Creates class instance for packageJson manipulation
   * @param {String} givenPath path to project working directory
   */
  constructor(givenPath = '.') {
    _defineProperty(this, "LAYER0_PACKAGE_PREFIX", '@layer0/');

    _defineProperty(this, "package", void 0);

    _defineProperty(this, "path", void 0);

    // Absoulte path to packageJson
    const absolutePath = path.resolve(process.cwd(), givenPath);
    this.path = path.join(absolutePath, 'package.json'); // Load Package.json

    this.load();
  }
  /**
   * Loads package.json
   */


  load() {
    try {
      this.package = require(this.path);
      return this.package;
    } catch (e) {
      return this.package = {};
    }
  }
  /**
   *  Returns a compiled list of dev and runtime layer0 packages
   */


  layer0AllPackages() {
    return [...this.layer0RuntimeDependencies(), ...this.layer0DevDependencies()];
  }
  /**
   * Returns a layer0 version found in package.json
   */


  findCurrentLayer0Version() {
    const allPackages = this.layer0AllPackages();

    if (isEmpty(allPackages)) {
      throw new MissingLayer0PackagesError(`There is no layer0 packages installed in ${this.path}`);
    }

    return allPackages[0][1];
  }
  /**
   * Return list of layer0 runtime dependencies
   */


  layer0RuntimeDependencies() {
    return this.layer0Dependencies(this.find('dependencies', {}));
  }
  /**
   * Returns list of layer0 dev dependencies
   */


  layer0DevDependencies() {
    return this.layer0Dependencies(this.find('devDependencies', {}));
  }
  /**
   * Returns entries for all @layer0/* packages in the specified object
   */


  layer0Dependencies(packages) {
    return Object.entries(packages).filter(([name]) => name.startsWith(this.LAYER0_PACKAGE_PREFIX) && name !== '@layer0/rum');
  }
  /**
   * Returns package json value by path
   * @param {String} path Path to object key (loash.get)
   */


  find(path, defaultValue = undefined) {
    return getValue(this.package, path, defaultValue);
  }
  /**
   * Loads package.json
   * @param {String} givenPath
   */


  static loadPackageJson(givenPath) {
    return new Layer0PackageJson(givenPath).package;
  }

}

module.exports = Layer0PackageJson;