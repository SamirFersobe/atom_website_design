"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
/**
 * A function for `transformRequest` that alters the request method to `toMethod`.
 * The request body is set to the value of the `pref_layer0_body` query parameter.
 *
 * **Example**
 *
 * ```js
 *  import { Router } from '@layer0/core/router'
 *  import { transformMethod } from '@layer0/core/transform'
 *
 *  const cacheConfig = {
 *    edge: {
 *      maxAgeSeconds: 60 * 60 * 24,
 *      staleWhileRevalidateSeconds: 60 * 60
 *    },
 *    browser: {
 *      serviceWorkerSeconds: 60 * 60 * 24,
 *      convertToGet: true // convert POSTs to GETs so we can prefetch and cache them
 *    }
 *  }
 *
 *  export default new Router()
 *    // When the request is a GET, convert it to post using serverless compute and cache the result
 *    .get('/some-post-path', ({ cache, proxy }) => {
 *      cache(cacheConfig)
 *      proxy('origin', {
 *        transformRequest: transformMethod('post')
 *      })
 *    })
 *    // When the request is a POST, forward it to origin from the edge without using serverless compute
 *    .post('/some-post-path', ({ cache, proxy }) => {
 *      cache(cacheConfig)
 *      proxy('origin')
 *    })
 * ```
 *
 * @param toMethod The method to to set
 */
function transformMethod(toMethod) {
    return (request) => {
        if (request.method !== toMethod) {
            const url = new URL(`http://dummy.com${request.url}`);
            // convert the request to a post
            request.method = toMethod;
            // get the post body from body query param
            request.body = url.searchParams.get(constants_1.POST_BODY_QUERY_PARAM) || '';
            // the backend proxy is now using rawBody property, so we need to create new Buffer with content of body
            request.rawBody = Buffer.from(request.body, 'utf8');
            // remove body from the URL
            url.searchParams.delete(constants_1.POST_BODY_QUERY_PARAM);
            request.url = url.pathname + url.search;
        }
    };
}
exports.default = transformMethod;
