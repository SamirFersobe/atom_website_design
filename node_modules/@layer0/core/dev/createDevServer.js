"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* istanbul ignore file */
const path_1 = require("path");
const constants_1 = require("../constants");
const express_1 = __importDefault(require("express"));
const loadRouter_1 = __importDefault(require("../router/loadRouter"));
const chalk_1 = __importDefault(require("chalk"));
const Cache_1 = require("../cache/Cache");
const timing_1 = require("../timing");
const logo_1 = __importStar(require("../utils/logo"));
const http_proxy_1 = __importDefault(require("http-proxy"));
const runLocalApp_1 = __importDefault(require("./runLocalApp"));
const bundle_esbuild_1 = require("../deploy/bundle-esbuild");
const config_1 = __importDefault(require("../config"));
const paths_1 = require("../deploy/paths");
const serverlessCompatibilityMiddleware_1 = __importDefault(require("./serverlessCompatibilityMiddleware"));
const ports_1 = require("../utils/ports");
/**
 * Creates a development server to simulate Layer0 locally.  Changes to your routes are automatically
 * applied without restarting `layer0 run`.
 * @param appReady An optional promise that resolves when your app is to receive requests
 * @returns A promise that resolves when Layer0 is ready to receive requests
 */
function createDevServer(options) {
    process.env.LAYER0_LOCAL = 'true';
    const layer0 = express_1.default().disable('x-powered-by');
    const appReady = (options === null || options === void 0 ? void 0 : options.command) || (options === null || options === void 0 ? void 0 : options.run) ? runLocalApp_1.default(ports_1.jsPort, options) : Promise.resolve();
    layer0.use(serverlessCompatibilityMiddleware_1.default);
    // Optional webpack compiler provided by the user
    if (options === null || options === void 0 ? void 0 : options.webpackConfig) {
        // compatible type definitions are not yet available for this after updating to webpack 5
        const middleware = require('webpack-dev-middleware');
        const webpack = require('webpack');
        layer0.use(middleware(webpack(options.webpackConfig), {
            writeToDisk: true,
            publicPath: path_1.join(process.cwd(), paths_1.ASSETS_DIR),
        }));
    }
    let router;
    const reloadRouter = () => {
        const routerPath = path_1.join(process.cwd(), paths_1.JS_DIR, path_1.basename(config_1.default.get('routes')));
        // Ensure that the router is reloaded when a new version is compiled
        // Note: there is a known memory leak here, but if we only reload the router when the user changes it,
        // the memory growth will be slow enough to not be noticeable in most cases.
        delete require.cache[routerPath];
        router = loadRouter_1.default(routerPath)
            .setBackend(constants_1.BACKENDS.permanentStatic, {
            domainOrIp: ports_1.localhost,
            port: ports_1.assetPort,
        })
            .setBackend(constants_1.BACKENDS.static, {
            domainOrIp: ports_1.localhost,
            port: ports_1.assetPort,
        })
            .setBackend(constants_1.BACKENDS.js, { domainOrIp: constants_1.JS_BACKEND_HOSTNAME, port: ports_1.jsPort });
    };
    const routerReady = bundle_esbuild_1.bundleRouterAndConfig({
        watch: {
            onRebuild(error, result) {
                Cache_1.clearCache();
                reloadRouter();
                if (!error) {
                    console.log(`${logo_1.infoLogLabel} router compiled successfully.`);
                }
            },
        },
    }).then(reloadRouter);
    // `router` will always be initialized as the middleware will stop incoming requests until build is done.
    layer0.use(timing_1.withTimings(async (req, res) => {
        await routerReady;
        return router.run(req, res); // @ts-ignore TypeScript complains here because our Request and Response objects don't exactly match express's
    }));
    const layer0Ready = new Promise((resolve, reject) => {
        try {
            const server = layer0.listen(ports_1.port, resolve);
            // Proxy websocket requests to the JS backend. Gatsby needs this for example.
            const proxy = http_proxy_1.default.createProxyServer({
                target: {
                    host: constants_1.JS_BACKEND_HOSTNAME,
                    port: ports_1.jsPort,
                },
            });
            server.on('upgrade', function (req, socket, head) {
                proxy.ws(req, socket, head);
            });
            server.on('error', function (error) {
                console.log(error.message);
            });
        }
        catch (e) {
            reject(e);
        }
    });
    return Promise.all([routerReady, appReady, layer0Ready])
        .then(() => {
        console.log('\n' +
            logo_1.default +
            ' ' +
            chalk_1.default.green(`ready on ${chalk_1.default.bold(chalk_1.default.underline(`http://${ports_1.localhost}:${ports_1.port}\n`))}`));
    })
        .catch(err => console.log('error', err));
}
exports.default = createDevServer;
