/// <reference types="node" />
import CacheKey from './CacheKey';
import LRU from 'lru-cache';
import RequestContext from '../router/RequestContext';
import Response from '../router/Response';
/**
 * We store the responses in the cache differently from their actual
 * representation because they are different classes in different
 * execution environments.
 */
export interface CachedResponse {
    /**
     * The HTTP status code
     */
    statusCode?: number;
    /**
     * The HTTP status message
     */
    statusMessage?: string;
    /**
     * The response body as a string or a Buffer
     */
    body?: string | Buffer;
    /**
     * The response HTTP headers
     */
    headers: {
        [key: string]: string | string[];
    };
}
/**
 * Must have the LAYER0_CACHE environment variable set.
 */
export declare function isCacheEnabled(): boolean;
/**
 * Gets the singleton instance of the development response cache
 */
export declare function getCache(): LRU<string, CachedResponse>;
/**
 * Evicts all entries from the cache
 */
export declare function clearCache(): void;
/**
 * Returns the cached response for the specified key
 * @param key The cache key
 */
export declare function getCachedResponse(key: CacheKey): CachedResponse | undefined;
export interface AddToCacheOptions {
    response: Response;
    cacheKey: CacheKey;
    context: RequestContext;
}
/**
 * Writes the response to the cache if x-0-cache-control has a non-zero max-age value.
 */
export declare function maybeCacheResponse({ response, cacheKey, context }: AddToCacheOptions): boolean;
