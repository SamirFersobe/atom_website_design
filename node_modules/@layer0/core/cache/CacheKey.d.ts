import { CustomCacheKey } from '../router';
import Request from '../router/Request';
/**
 * An actual cache key derived from a request per the user's CustomCacheKey specification
 */
export default class CacheKey {
    body?: string;
    method?: string;
    pathname: string;
    query: {
        [key: string]: string | string[] | undefined;
    };
    headers: {
        [key: string]: string | string[];
    };
    cookies: {
        [key: string]: string | string[];
    };
    static create(request: Request, customKey?: CustomCacheKey): CacheKey;
    constructor(request: Request, customKey?: CustomCacheKey);
    /**
     * We always ignore layer0_* query params when computing the cache key so that things like layer0_prefetch don't cache bust
     * @param query
     */
    excludeLayer0QueryParams(query: {
        [name: string]: string | string[] | undefined;
    }): {
        [name: string]: string | string[] | undefined;
    };
    /**
     * Returns an array of values in the object sorted by the key
     * We sort query params so that different orderings will result in a hit
     * @param source Any object of key/value pairs, e.g. query, headers, cookies, etc...
     */
    toSortedArray(source: {
        [name: string]: any;
    }): any[][];
    /**
     * Returns the values of the request headers that are by default included in the caching key
     *
     * Notes:
     * - Cache hash calculation has a connascence of algorithm with VCL moov_hash subroutine so if you
     * are modifying it in any way, you have to modify VCL code generator in the same way. When in doubt
     * the VCL cache hash calculation takes precendence as it is designed to serve production traffic
     * and has been battle tested to do so reliably.
     * - VCL cache hash includes some request/service properties that do no apply in local development:
     * * build number does not exist for local development
     * * flush timestamps for gradual flushing do not apply locally
     */
    private getDefaultHeaders;
    toString(): string;
}
