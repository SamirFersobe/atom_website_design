"use strict";
/*
 * Wrap the console logging functions with 'pino' JSON logger
 * when we are running as a lambda
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.awsCloudWatchTag = { awsTag: 'userLogs' };
const util = require('util');
const pino = require('pino');
// The following console function write to stdout,
// but we do not support them when running as Lambda.
// console.count
// console.countReset
// console.dirxml
// console.group
// console.table
// Because the enable() and disable() functions can
// be called multiple, overlapping times, we need to
// put these two variables into a global.
// istanbul ignore else
const layer0OriginalConsole = {
    assert: console.assert,
    debug: console.debug,
    dir: console.dir,
    error: console.error,
    info: console.info,
    log: console.log,
    time: console.time,
    timeEnd: console.timeEnd,
    timeLog: console.timeLog,
    trace: console.trace,
    warn: console.warn,
};
let _timers = {};
/**
 * A function set as `logMethod` in Pino options in order to concatenate
 * trailing parameters to logging functions. This emulates the behavior
 * of console.log family of methods.
 *
 * More at https://github.com/pinojs/pino/blob/HEAD/docs/api.md#interpolationvalues-any
 */
function pinoLogArgConcatenationMethod(args, method) {
    if (args.length >= 2) {
        // interpolate all non-string arguments with %j which serializes objects properly
        // @ts-ignore
        method.apply(this, [
            args.map(arg => (typeof arg === 'string' ? '%s' : '%j')).join(' '),
            ...args,
        ]);
    }
    else {
        // @ts-ignore
        method.apply(this, args);
    }
}
class ConsoleWrapper {
    static _assert(condition, ...args) {
        if (!condition) {
            console.info(...args);
        }
    }
    static _dir(...args) {
        console.info(util.inspect(...args));
    }
    static _time(label) {
        _timers[label] = Date.now();
    }
    static _timeEnd(label) {
        ConsoleWrapper._timeLog(label);
    }
    static _timeLog(label, ...args) {
        if (!_timers[label]) {
            console.warn(`Warning: No such label '${label}' for console.timeEnd()`);
            return;
        }
        const deltaTime = Date.now() - _timers[label];
        _timers[label] = Date.now();
        console.info(`${label}: ${deltaTime}ms`, ...args);
    }
    static enable({ clientIp, requestId, wi, } = {}) {
        _timers = {};
        let logger = pino({
            base: {
                ...exports.awsCloudWatchTag,
                ...{ wi },
            },
            // Changing this to true because we are getting rid of cloudwatch
            // which used to add timestamps automatically. We should use the log generation time over
            // log ingestion time anyway because the former is more accurate.
            timestamp: true,
            hooks: {
                logMethod: pinoLogArgConcatenationMethod,
            },
        });
        if (clientIp) {
            logger = logger.child({ clientIp });
        }
        if (requestId) {
            logger = logger.child({ requestId });
        }
        console.assert = ConsoleWrapper._assert;
        console.debug = logger.debug.bind(logger);
        console.dir = ConsoleWrapper._dir;
        console.error = logger.error.bind(logger);
        console.info = logger.info.bind(logger);
        console.log = logger.info.bind(logger);
        console.time = ConsoleWrapper._time;
        console.timeEnd = ConsoleWrapper._timeEnd;
        console.timeLog = ConsoleWrapper._timeLog;
        console.trace = logger.trace.bind(logger);
        console.warn = logger.warn.bind(logger);
    }
    static disable() {
        console.assert = layer0OriginalConsole.assert;
        console.debug = layer0OriginalConsole.debug;
        console.dir = layer0OriginalConsole.dir;
        console.error = layer0OriginalConsole.error;
        console.info = layer0OriginalConsole.info;
        console.log = layer0OriginalConsole.log;
        console.time = layer0OriginalConsole.time;
        console.timeEnd = layer0OriginalConsole.timeEnd;
        console.timeLog = layer0OriginalConsole.timeLog;
        console.trace = layer0OriginalConsole.trace;
        console.warn = layer0OriginalConsole.warn;
    }
}
exports.default = ConsoleWrapper;
