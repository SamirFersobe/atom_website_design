import Response from '../router/Response';
/**
 * Adapts the response body to the downstream accept encoding. This may mean:
 * a) Not doing anything if the downstream accept encoding the content encoding are compatible.
 * b) Compressing the response body to a downstream compatible encoding, if response body has no encoding.
 * c) Decompressing the response body from downstream incompatible encoding and optionally re-compressing it
 * to downstream compatible encoding.
 *
 * If any compression is done by this function, then the content-encoding and content-length headers will
 * correspond to the new encoding/length of the response body.
 *
 * @param acceptEncoding Value of downstream accept-encoding header
 * @param res HttpResponse object
 * @param response Lambda response object
 */
declare const adaptResponseEncodingToDownstream: (acceptEncoding: string, res: Response, response: any) => void;
export default adaptResponseEncodingToDownstream;
