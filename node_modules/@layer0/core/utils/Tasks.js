"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Tasks {
    constructor() {
        this._tasks = [];
        this._resolveHandler = Function.prototype;
        this._errorHandler = (err) => {
            throw err;
        };
    }
    /**
     * Adds a task to taks array that can be resolved with tasks.resolve()
     *
     * @param tasks List of tasks to finish
     */
    add(...tasks) {
        this._tasks.push(...tasks);
        return this;
    }
    /**
     * Resolve Handler that will be called per each task with resolved value
     *
     * @param handler
     */
    onTaskDone(handler) {
        this._resolveHandler = handler;
        return this;
    }
    /**
     * Error Handler that will be called per each task and can be useful
     * for ignoring the specific errors
     *
     * @param errorHandler
     */
    onTaskError(errorHandler) {
        this._errorHandler = errorHandler;
        return this;
    }
    /**
     * Finishes all tasks
     */
    resolve() {
        const promises = this._convertTasksToPromises().map((task, i) => {
            return task
                .then((res) => {
                this._resolveHandler(res);
                return res;
            })
                .catch((err) => {
                return this._errorHandler(err);
            });
        });
        return Promise.all(promises);
    }
    /**
     * Returns list of tasks that are converted into promises | functions
     */
    _convertTasksToPromises() {
        return this._tasks.map(task => {
            if (typeof task !== 'function') {
                return Promise.resolve(task);
            }
            // Run the task and check if it returns a promise
            try {
                const taskResult = task();
                if (taskResult instanceof Promise) {
                    return taskResult;
                }
                // sync function results
                return Promise.resolve(taskResult);
            }
            catch (e) {
                // Return a error promise if sync task fails
                // This allows to ignore some errors with error handler
                return Promise.reject(e);
            }
        });
    }
}
exports.default = Tasks;
