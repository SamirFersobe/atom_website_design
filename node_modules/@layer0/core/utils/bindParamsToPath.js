"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Binds params to path.
 *
 * Example:
 * ```js
 * bindParamsToPath('/:foo/:bar*', { foo: 'p1', bar: 'p2/p3' })
 * ```
 * Output: `/p1/p2/p3`
 *
 * @param path The path, with param substitutions in braces `{}`.
 * @param params An object with keys matching the params in braces.
 * @returns A string with the params substituted with their values.
 */
exports.default = (path, params) => {
    let p = path;
    // We allow edge interpolation params which begin with `${` but we no longer
    // allow old path options that only begin with `{`.
    if (/(^|[^$]){/.test(path)) {
        throw new Error(`{variable} syntax in the path option is no longer supported, use :variable instead (${path})`);
    }
    for (let paramName in params) {
        let value = params[paramName];
        if (Array.isArray(value)) {
            value = value.join('/');
        }
        // Here we decide *not* to use path-to-regexp `compile()` function
        // as bindParamsToPath is used by other string which are not paths.
        // For example it is used to interpolate setHeader values, which can be a CORS header like
        // 'https://www.domain.com/:path'. The ':' behind https is not a valid path-to-regexp expression.
        // p = p.replace(new RegExp(`:${paramName}(\\?|\\*|\\(.*\\)[?*]?)?`, 'g'), value)
        p = p.replace(new RegExp(`:${paramName}(\\([^)]*\\))?[?*+]?`, 'g'), value === undefined ? '' : value);
    }
    // For optional matchers (:path* and :path?), path may not be defined in params
    // after matching a route but should still be replaced by a blank value
    //
    // ex: pathToRegexp.match('/public/:param?')('/').params returns {}
    //     so bindParamsToPath('/public/:param?', {}) should return '/public/'
    //
    p = p.replace(/:\w+(\*|\+|\?)?/, '');
    // We un-escape '?' character that needed to be escape from path-to-regexp expression
    // to *not* be considered as optional parameter matcher
    p = p.replace('\\?', '?');
    p = p
        .replace(/\/+/g, '/') // finally dedupe /'s that result from missing optional parameters
        .replace(/^([^:]+:)\//gi, '$1//'); // but don't replace http://domain with http:/domain
    return p;
};
