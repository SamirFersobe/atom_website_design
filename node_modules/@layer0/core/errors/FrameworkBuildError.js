"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const v8_1 = __importDefault(require("v8"));
/**
 * To be thrown when the user's application fails to build.
 */
class FrameworkBuildError extends Error {
    constructor(framework, command, error) {
        super(`${framework} build command "${command}" failed. This is most likely due to an error in your application code and not a problem with Layer0. Try running "${command}" on your CLI`); // istanbul ignore next - this is a known issue with TypeScript
        this.isUserError = true;
        if (error && error.message.includes('JavaScript heap out of memory')) {
            const currentMemoryLimit = v8_1.default.getHeapStatistics().total_available_size;
            const memoryInMb = (+currentMemoryLimit * 2) / (1024 * 1024);
            this.message = `Node.js ran out of memory while attempting to build your app.
Currently Node processes are capped at ${currentMemoryLimit} bytes of memory.
You can raise this limit by setting the following environment variable in your shell initialization script:

  NODE_OPTIONS=--max_old_space_size=${Math.round(memoryInMb)}
`;
        }
    }
}
exports.default = FrameworkBuildError;
