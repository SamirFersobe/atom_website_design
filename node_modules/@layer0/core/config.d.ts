/**
 * An object containing the config settings. This class is internal, but an instance
 * can be obtained using.
 *
 * ```js
 * import config from '@layer0/core/config'
 * ```
 *
 * @internal
 */
declare class Config {
    private values?;
    readonly defaults: {
        production: boolean;
        backends: {};
        includeNodeModules: boolean;
        routes: string;
    };
    /**
     * Get configuration by key. Will throw an error if no value is configured
     * @param key The key to grab from the config.
     * @param fallback A value to return if a value is not configured
     */
    get(key: string, fallback?: any): any;
    /**
     * Returns true if a value has been configured for a specific key, otherwise false.
     * @param key The key to test.
     */
    has(key: string): boolean;
    /**
     * Returns all config values
     */
    get all(): any;
    /**
     * Loads Layer0 config and sets the current configuration.
     */
    private loadLayer0Config;
    /**
     * Load configuration from file
     * @private
     */
    private loadFromFile;
    /**
     * Load configuration from env var
     * @private
     */
    private loadFromEnv;
}
declare const _default: Config;
/**
 * Create a Config instance.
 */
export default _default;
