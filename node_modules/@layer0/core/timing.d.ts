import Response from './router/Response';
export declare const NOT_ENDED_VALUE = "na";
export declare class InternalTiming {
    /**
     * The name assigned to the timing in response headers
     */
    readonly name: string;
    /**
     * The time the timing started
     */
    startTime?: Date;
    /**
     * The number of milliseconds elapsed
     */
    duration: number;
    /**
     * A discrete value for the timing, for example "hit" for "ecc"
     */
    discreteValue?: string;
    /**
     * Set to true if the timing has been ended
     */
    ended: boolean;
    /**
     * @param name The name of the timing component that will be reported in the `x-0-user-t` header
     */
    constructor(name: string, internal?: boolean);
    /**
     * Starts the timing.
     * @returns A self-reference, suitable for chaining
     */
    start(): this;
    /**
     * Sets the discrete value for this timing
     * @param discreteValue
     * @returns A self-reference, suitable for chaining
     */
    set(discreteValue: string): this;
    /**
     * Ends the timing.
     * @returns A self-reference, suitable for chaining
     */
    end(): this;
    /**
     * Convenience method that is the same as `end`, but meant to indicate
     * that the timing may be resumed later
     */
    pause(): this;
    /**
     * Convenience method that is the same as `start`, but meant to indicate
     * that the timing has been paused.
     */
    resume(): this;
    /**
     * Gets the value of the timing for response headers. Will be 'na' if not started, otherwise
     * the numeric duration in milliseconds.
     */
    get value(): string | number;
}
/**
 * A higher order function that wraps the provided function in a request context with user
 * and internal timings reset
 * @private
 * @param handler
 */
export declare function withTimings<T extends Promise<any>>(handler: (...args: any[]) => T): (...args: any[]) => any;
/**
 * Returns the value of the internal timing with the specified name
 * @private
 * @param name The name of an internal timing, for example "ecc"
 */
export declare function getInternalTiming(name: string): string | number | undefined;
/**
 * Adds x-0-t, x-0-user-t, and server-timing headers to the response
 * @private
 * @param response
 */
export declare function addTimings(response: Response): void;
/**
 * Allows you to track the performance of your code and asynchronous operations such as fetches.
 * Timings will be returned as a comma delimited list in the `x-0-user-t` header.
 *
 * ** Example **
 *
 * ```js
 * import Timing from '@layer0/core/timing'
 *
 * const timing = new Timing('fetch').start()
 * const result = await fetch('http://my-api.com/products/1')
 * timing.end() // will result in `x-0-user-t: fetch=(millis)` response header
 * ```
 *
 * If a timing is started but not finished by the time the response is sent, the value will be `na`.
 */
export default class Timing extends InternalTiming {
    constructor(name: string);
}
/**
 * Names for x-0-t components
 */
export declare enum InternalNames {
    edgeCache = "ecc",
    transformRequest = "wa",
    transformResponse = "wz",
    routeMatching = "wr",
    proxying = "wp"
}
/**
 * Values for edgeCache component of x-0-t
 */
export declare enum CacheValue {
    hit = "hit",
    pass = "pass",
    cached = "cached"
}
