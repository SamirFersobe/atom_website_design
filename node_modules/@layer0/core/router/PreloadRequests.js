"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = __importDefault(require("../config"));
const Tasks_1 = __importDefault(require("../utils/Tasks"));
class PreloadRequests {
    constructor() {
        this.options = [];
    }
    /**
     * Adds prerender config to list
     *
     * @param preloadConfig
     */
    push(...preloadConfig) {
        this.options.push(...preloadConfig);
    }
    /**
     * Resolves Preload config per destination
     * @param router
     * @private
     */
    static async resolveDestinationPreloadConfig(router, destination) {
        const requests = [];
        await new Tasks_1.default()
            .add(...router.preloadRequests.options)
            .onTaskDone((result) => {
            requests.push(...result.map(r => ({ ...r, destination })));
        })
            .resolve();
        return {
            requests,
        };
    }
    /**
     * Resolves compiled Preload config across all destinatons
     * @param router
     * @private
     */
    static async resolvePreloadConfig(router) {
        const preloadRequests = [];
        const tasks = new Tasks_1.default();
        const destinations = router.getDestinations();
        // Compile all the requests and options across all destinations
        if (!Object.keys(destinations).length) {
            tasks.add(PreloadRequests.resolveDestinationPreloadConfig(router, 'default'));
        }
        else {
            for (let d in destinations) {
                tasks.add(PreloadRequests.resolveDestinationPreloadConfig(destinations[d], d));
            }
        }
        await tasks
            .onTaskDone(({ requests }) => {
            preloadRequests.push(...requests);
        })
            .resolve();
        return {
            requests: preloadRequests,
            concurrency: config_1.default.get('prerenderConcurrency', null),
        };
    }
}
exports.default = PreloadRequests;
