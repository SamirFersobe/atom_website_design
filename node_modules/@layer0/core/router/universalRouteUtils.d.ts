/**
 * Compares criteria object with request object and returns Boolean.
 *
 * The comparison of keys is case-sensitive by default but an optional `criteriaObjKeyNameFn`
 * parameter can be passed to force case-insensitive comparison.
 *
 * @param criteriaObj Object that contains the criteria ([key]: regex | null)
 * @param requestObj Request object that contains ([key]: string | [key]: string[] | undefined)
 * @param criteriaObjKeyNameFn Optional function to process criteria key names; by default set to `identity`
 *
 * @returns Boolean
 * true when all conditions are matching
 * false if one of the conditions failed
 */
export declare function matchCriteriaRegexObjectWithRequestObject(criteriaObj: {
    [name: string]: string | RegExp | null;
}, requestObj: {
    [key: string]: string | string[] | undefined;
}, criteriaObjKeyNameFn?: (key: string) => string): false | {
    [key: string]: string;
};
/**
 * Tests to see if source object deeply matches the criteria object
 *
 * @param source Object
 * @param criteria Object
 *
 * @returns boolean
 */
export declare function deepMatchObject(source: any, criteria: any): boolean;
/**
 * Returns true if the value is a matcher that is used to extract
 * request params, like ':id' or ':path'
 * @param value
 */
export declare function isParamMatcher(value: any): boolean;
/**
 * Transform a route param matcher to the param name
 * ex: ':id' -> 'id'
 * @param value
 */
export declare function paramMatcherToParam(value: any): any;
/**
 * Ensures that the regular expression will be tested anew, without changing its internal state.
 *
 * Notes:
 * - Sometimes users use global for RegExp definitions. In those cases `.test` changes the internal
 * state and leads to different requests on subsequent calls (usually flip-flopping between
 * subsequent requests)
 *
 * @private
 * @param regexp Regular expression
 * @param value Value to test or array of values to test
 */
export declare function testRegExp(regexp: RegExp, value: undefined | string | string[]): boolean;
