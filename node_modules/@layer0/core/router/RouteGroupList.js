"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const RouteGroup_1 = __importDefault(require("./RouteGroup"));
const constants_1 = require("../constants");
/**
 * Holds a list of route groups
 * This class is needed for querying route groups that is needed
 * for keeping the routes hierarchy while changing the routes in a group.
 * For example, updating next.js routes in local dev env.
 */
class RouteGroupList {
    constructor() {
        this.routeGroups = [];
    }
    /**
     * Pushes route group to list.
     * @param group The route group.
     * @returns A self-reference suitable for chaining.
     */
    add(group) {
        this.routeGroups.push(group);
        return this;
    }
    /**
     * Returns all route groups.
     * @returns A list of all the route groups.
     */
    getGroups() {
        return this.routeGroups;
    }
    /**
     * Returns route group by name.
     * @param name The name of the route group to find.
     * @returns The route group with the given name, or `null` if not found.
     */
    findByName(name) {
        return this.routeGroups.find(g => g.name === name);
    }
    /**
     * Returns all registered routes in all groups.
     * @returns List of registered routes.
     */
    getRoutes() {
        let routes = [];
        this.getGroups().forEach(group => {
            routes = routes.concat(group.routes);
        });
        if (this.fallback) {
            routes = routes.concat(this.fallback.routes);
        }
        return routes;
    }
    /**
     * Sets the fallback group, which is always run last.
     * @param handler
     */
    setFallback(handler) {
        const fallbackGroup = new RouteGroup_1.default(constants_1.ROUTES_FALLBACK);
        fallbackGroup.match(null, handler);
        this.fallback = fallbackGroup;
    }
    /**
     * Returns the length of route groups list.
     * @returns The number of route groups in the list.
     */
    get length() {
        return this.routeGroups.length;
    }
}
exports.default = RouteGroupList;
