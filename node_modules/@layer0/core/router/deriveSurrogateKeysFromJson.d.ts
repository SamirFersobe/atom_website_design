import Response from './Response';
export interface DeriveSurrogateKeyOptions {
    /**
     * Determines the behavior when the origin returns a `x-0-surrogate-key` response header
     * - Use "merge" to include surrogate keys returned from the origin via the `x-0-surrogate-key` response header.
     * - Use "override" to discard surrogate keys returned from the origin via the `x-0-surrogate-key` response header.
     */
    onConflict: 'merge' | 'override';
}
/**
 * Creates a response transformer that assigns surrogate keys for the given body parsed as JSON. Accepts a
 * callback function that takes the response body parsed as json and returns an array of surrogate
 * keys to assign the response when cached. This function will only be called on cache misses. When a request
 * has no body or a body that cannot be parsed as JSON, the callback function will be passed `undefined`.
 * Returning anything other than an array of string will result in no surrogate keys being assigned and a warning
 * will be logged.
 *
 * Example:
 *
 * ```
 *  new Router()
 *    .graphqlOperation('GetPost', ({ cache }) => {
 *      cache({
 *        edge: {
 *          maxAgeSeconds: 60 * 60
 *        }
 *      })
 *      proxy('graphql', {
 *        transformResponse: deriveSurrogateKeysFromJson(json => [`posts.${json.id}`])
 *      })
 *    })
 * ```
 * @param extractKeys
 * @returns
 */
export default function deriveSurrogateKeysFromJson(extractKeys: (bodyFromJson: any | undefined) => string[], options?: DeriveSurrogateKeyOptions): (res: Response) => Promise<void>;
