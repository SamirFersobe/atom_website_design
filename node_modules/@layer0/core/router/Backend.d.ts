import BackendConfig from './BackendOptions';
import Request from './Request';
import Response from './Response';
/**
 * @private
 */
export interface FetchOptions {
    /**
     * The URL path to fetch
     */
    path?: string;
    /**
     * The HTTP request headers to send
     */
    headers?: Headers;
    /**
     * If set to `true`, invalid TLS certs will be ignored. Otherwise an error will be thrown
     * when the server returns an invalid TLS certificate.
     */
    disableCheckCert?: boolean;
    /**
     * Removes the "=" from search parameters that have no value. So for example:
     * "http://domain.com?foo=&bar=" becomes "http://domain.com?foo&bar"
     */
    removeEmptySearchParamValues?: boolean;
}
/**
 * @private
 */
export default class Backend {
    protected config: BackendConfig;
    static setImpl(implementation: {
        new (config: BackendConfig): Backend;
    }): void;
    static create(config: BackendConfig): Backend;
    constructor(config: BackendConfig);
    /**
     * Sends a request using the proxy.
     * @param req The request being sent.
     * @param res The response for the request.
     */
    fetch(req: Request, res: Response, options: FetchOptions): Promise<unknown>;
    /**
     * Returns proxy configuration for http-proxy
     * @returns proxy target url
     */
    private getProxyTarget;
    /**
     * Returns true if the URL points to the local JS backend, otherwise false.
     * @param url
     * @returns
     */
    private isLocal;
    /**
     * Returns proxy configuration object for node-fetch
     * @param url
     * @param req
     * @param headers Additional request headers to include
     * @param removeEmptySearchParamValues If true, search param values that are empty are removed so "?foo=" becomes "?foo".
     */
    private getProxyRequestOptions;
}
/**
 * @private
 */
declare type Headers = {
    [key: string]: string;
};
export {};
