import { CacheOptions } from './CacheOptions';
/**
 * A representation of a route to be passed to the browser.
 * @private
 */
export interface CacheManifestEntry {
    /**
     * Criteria path as expressed in User's routes
     */
    criteriaPath: string | undefined;
    /**
     * The criteria path turned into a regexp string
     */
    route: string;
    /**
     * Key/value pairs for the route's query params to match
     */
    query?: {
        [key: string]: string | null;
    };
    /**
     * Caching options for the route
     */
    cacheOptions: CacheOptions;
    /**
     * Optional http method to match for the route
     */
    method?: string;
    /**
     * Optional protocol to match for the route
     */
    protocol?: string;
    /**
     * Set to true if the route returns a response (e.g. proxy, send, compute) in which
     * case the router/prefetcher should stop searching for other route matches.
     */
    returnsResponse: boolean;
}
/**
 * A serializable array of route descriptors to be passed to the browser.
 * @private
 */
export default class CacheManifest {
    entries: CacheManifestEntry[];
    constructor(entries?: CacheManifestEntry[]);
    /**
     * Returns a list of entries in this CacheManifest where both the browser and
     * edge cache times are defined, and greater than 0
     */
    get cacheableEntries(): CacheManifestEntry[];
    /**
     * Returns a list of routes (as RegExp) that are cacheable SPA routes
     */
    get spaRoutes(): RegExp[];
    /**
     * Returns true if the URL should be prefetched, based on the matched route's `cacheOptions`
     * @param url The URL to test
     */
    shouldPrefetch(url: URL): boolean;
    /**
     * Returns true if the entry matches the URL's path, query params, and/or protocol
     * @param entry The entry to test
     * @param url URL to check against the entry
     */
    static entryMatches(entry: CacheManifestEntry, url: URL): boolean;
    /**
     * Returns true if the given entry has its `cacheOptions` set so that the route
     * is cacheable by the edge and the browser.
     * @param entry The entry to test
     */
    static isEntryCacheable({ cacheOptions }: CacheManifestEntry): boolean;
    /**
     * Creates a new `CacheManifest` object from the provided serialized entries
     */
    static fromEntries(entries: CacheManifestEntry[]): CacheManifest;
    /**
     * Serializes the list so that it can be passed to the browser
     */
    toJSON(): string;
}
