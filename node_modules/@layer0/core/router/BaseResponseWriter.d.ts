import Request from './Request';
import Response from './Response';
import Route from './Route';
import { CacheOptions } from './CacheOptions';
import { CorsOptions, ProxyOptions, ServeStaticOptions, RedirectOptions, VerifyJwtOptions } from './ResponseWriter';
export interface CookieOptions {
    Expires?: string;
    'Max-Age'?: number;
    Domain?: string;
    Path?: string;
    Secure?: boolean;
    HttpOnly?: boolean;
    SameSite?: string;
}
/**
 * @private
 * Having a no-op BaseResponseWriter makes it easy for us to stub out the writer
 * when introspecing the router.  This is needed to implement Router.getPrefetchableRoutes
 */
export declare class BaseResponseWriter {
    constructor(req?: Request, res?: Response, route?: Route);
    cache(options: CacheOptions): void;
    redirect(to: string, options: RedirectOptions): void;
    /**
     * Translates redirect params into normalized version that solves backward compatibility
     * issues and also takes into account query parameters that may be included in the query
     * string itself.
     *
     * @param to string to where we are redirecting the request; may have query string
     * @param options options with which we are redirecting the request
     */
    protected _readRedirectParams(to: string, options: RedirectOptions): {
        to: string;
        statusCode: number;
        query: {};
    };
    proxy(backend: string, options?: ProxyOptions): void;
    render(cb: (request: Request, proxy: (backend: string, options: ProxyOptions) => void, params: any) => void): void;
    stream(backend: string): void;
    serveStatic(path: string, options?: ServeStaticOptions): void;
    updatePath(destination: string): void;
    rewrite(destination: string, pattern: string): void;
    setRequestHeader(name: string, value: string): void;
    updateRequestHeader(name: string, match: RegExp, replace: string): void;
    removeRequestHeader(name: string): void;
    setUpstreamResponseHeader(name: string, value: string): void;
    updateUpstreamResponseHeader(name: string, match: RegExp, replace: string): void;
    removeUpstreamResponseHeader(name: string): void;
    verifyJwt(options: VerifyJwtOptions): void;
    setResponseHeader(name: string, value: string): void;
    updateResponseHeader(name: string, match: RegExp, replace: string): void;
    removeResponseHeader(name: string): void;
    addResponseCookie(name: string, value: string, options?: CookieOptions): void;
    updateResponseCookie(name: string, match: RegExp, replace: string): void;
    removeResponseCookie(name: string): void;
    addUpstreamResponseCookie(name: string, value: string, options?: CookieOptions): void;
    updateUpstreamResponseCookie(name: string, match: RegExp, replace: string): void;
    removeUpstreamResponseCookie(name: string): void;
    send(content: string | (() => string), statusCode: number, statusMessage?: string): void;
    compute(callback: (request: Request, response: Response) => void | Promise<void>): void;
    serviceWorker(path: string): void;
    allowCors(options: CorsOptions): void;
    appShell(indexHtmlPath: string): void;
    renderWithApp(options?: ProxyOptions): void;
}
