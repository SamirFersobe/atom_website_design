"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Adds preload headers for all `<link rel="preload">` tags on the response.body
 * @private
 * @param res The response to which headers should be added.
 */
function addPreloadHeaders(res) {
    if (/text\/html/i.test(res.getHeader('Content-Type'))) {
        let { body } = res;
        const matches = [];
        const preloadRegex = /<link rel="preload" href="([^"]*)".+?(?=>)/gis;
        const typeRegex = /as="([^"]*)"/i;
        let match;
        if (Buffer.isBuffer(body)) {
            body = body.toString('utf8');
        }
        if (typeof body === 'string') {
            while ((match = preloadRegex.exec(body))) {
                // determine possible type if defined on the tag
                const type = typeRegex.exec(match[0]);
                matches.push({ uri: match[1], as: type && type[1] });
            }
        }
        const newLinks = matches.map(linkFile).join(', ');
        // Add to existing links if exist
        const existingLinks = res.getHeader('link');
        if (existingLinks) {
            res.setHeader('link', `${existingLinks}, ${newLinks}`);
        }
        else if (newLinks.length) {
            res.setHeader('link', newLinks);
        }
    }
}
exports.default = addPreloadHeaders;
/**
 * Creates a preload header value for the specified file
 * @param link The request uri and possible type
 * @private
 */
function linkFile(link) {
    let { uri, as } = link;
    let name = uri.split('?')[0];
    if (!as) {
        if (name.toLowerCase().endsWith('.css')) {
            as = 'style';
        }
        else if (name.toLowerCase().match(/(woff|woff2|truetype|opentype|embedded-opentype)$/)) {
            as = 'font';
        }
        else {
            as = 'script';
        }
    }
    return `<${name}>; as=${as}; rel=preload`;
}
