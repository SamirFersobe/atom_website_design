/// <reference types="node" />
/**
 * Represents an incoming request.
 */
export default interface Request {
    /**
     * The path and query string
     */
    url: string;
    /**
     * Just the path part of the URL
     */
    path: string;
    /**
     * The request body as a string
     */
    body?: string;
    /**
     * The raw request body as a buffer
     */
    rawBody?: Buffer;
    /**
     * The HTTP method
     */
    method: string;
    /**
     * The request headers.  Keys are header names, values are either a string, or when multiple values for
     * the same header name are present, an array of strings.
     */
    headers: {
        [key: string]: string | string[];
    };
    /** @private */
    on: (event: string, callback: Function) => void;
    /**
     * The path params returned by the matching route.
     */
    params?: {
        [key: string]: string | string[];
    };
    /**
     * The params extracted from the request URL's query string
     */
    query?: {
        [key: string]: string | string[] | undefined;
    };
    /**
     * Flag indicating if the connection to Layer0 is secure (HTTPS) or not (HTTP).
     */
    secure: boolean;
    /**
     * Sets a header
     * @param name The name of the header to set
     * @param value The value to set
     */
    setHeader: (name: string, value: string) => void;
    /**
     * Gets the value of a header
     * @param name The name of the header to return
     * @returns The value of the header
     */
    getHeader: (name: string) => string;
    /**
     * Gets all headers as key/value pairs.
     */
    getHeaders: () => {
        [name: string]: string;
    };
    /**
     * Removes a header
     * @param name The header to remove
     */
    removeHeader: (name: string) => void;
}
