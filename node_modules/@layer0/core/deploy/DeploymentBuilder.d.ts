import { CopyOptionsSync } from 'fs-extra';
import shell from 'shelljs';
import { Router } from '../router';
import { BuildOptions } from '.';
/**
 * The class helps you bundle apps for deployment on Layer0.
 */
export default class DeploymentBuilder {
    readonly appDir: string;
    readonly layer0Dir: string;
    readonly jsDir: string;
    readonly staticAssetsDir: string;
    readonly permanentStaticAssetsDir: string;
    readonly sourcesDir: string;
    private router?;
    private assetExpiration;
    constructor(appDir?: string);
    /**
     * Logs a message to the console if process.env.debug is set to true
     * @param msg The message to log
     */
    log(...msg: any[]): void;
    /**
     * Runs a command.
     * @param path The command to run
     * @param options Options for shelljs
     * @return {Promise} A promise that resolves when the command is finished.
     */
    exec(command: string, options?: ExecOptions): Promise<unknown>;
    /**
     * Adds an asset to the bundle for JavaScript workers
     * @param src The source path
     * @param dest An optional destination path within the lambda root directory.
     * If not provided, the destination path will be the same as the source path.
     * @param options Options for copySync
     * @return a self reference, suitable for chaining
     */
    addJSAsset(src: string, dest?: string, options?: CopyOptionsSync): this;
    /**
     * Copies a file or directory into .layer0/src
     * @param src
     */
    addSource(src: string): void;
    /**
     * Adds source files to the bundle based on:
     *
     *  - The `sources` property of layer0.config.js, or, if not present
     *  - All files committed to git.
     *
     * If sources is not present in layer0.config.js, and the project does not use git, an error will be thrown.
     */
    private addSources;
    /**
     * Adds the prod entry point from the connector attribute in layer0.config.js
     * @return a self reference, suitable for chaining
     */
    private addProdEntrypoint;
    /**
     * Adds a folder or file as static asset.
     * Also register directories as asset aliases when they contains an index.html file
     *
     * @param src The source path
     * @param dest An optional destination path in s3. If not provided, the destination path will be the same as the source path.
     * @return a self reference, suitable for chaining
     */
    addStaticAsset(src: string, dest?: string, { permanent, exclude }?: {
        permanent?: boolean;
        exclude?: string[];
    }): this;
    /**
     * Ensures that all path/to/dir/index.html files in S3 have an alias for /path/to/dir. This
     * allows the edge to simply forward URLs like /foo to S3 and have S3 respond with /foo/index.html.
     * THis is critical to the functionality of Gatsby, Next.js, and other static site builders.
     */
    private createStaticAssetAliases;
    /**
     * Ensures all assets in the "all", "js", and "ts" subdirectories of `defaultAppPath` are either already
     * present in the user's app or are copied over from `defaultAppPath`.
     * @param defaultAppPath
     * @return A self reference, suitable for chaining
     */
    addDefaultAppResources(defaultAppPath: string): this;
    /**
     * Copies all the layer0 scripts into the package.json file, if they don't already exist.
     * @param scriptsOverride Used to pass framework-specific script overrides
     * @param overrideExisting Set to true to override existing layer0 script elements
     * @return A self reference, suitable for chaining
     */
    addDefaultLayer0Scripts(scriptsOverride?: {}, overrideExisting?: boolean): this;
    /**
     * Copies a file
     * @param from the source path
     * @param to the destination path
     */
    copySync(from: string, to: string, copySyncOptions?: CopyOptionsSync): void;
    /**
     * Writes a file
     * @param to the destination path
     * @param content the contents of the file
     * @param encoding the encoding
     */
    writeFileSync(to: string, content: string): void;
    /**
     * Deletes all files in a directory
     * @param dir The directory to empty
     */
    emptyDirSync(dir: string): void;
    /**
     * Reads a file
     * @param path the file path
     * @param options Options for `fs.readFileSync`
     * @returns The file contents
     */
    readFileSync(path: string, { encoding }?: {
        encoding?: "base64" | "binary" | "ascii" | "utf8" | "hex" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "latin1" | undefined;
    }): string;
    /**
     * Deletes a file
     * @param path The file to delete
     */
    removeSync(path: string): void;
    /**
     * Deletes the output of the previous build.
     */
    clearPreviousBuildOutput(): this;
    /**
     * Returns the router instance.
     * @return {Router}
     */
    getRouter(): Promise<Router>;
    /**
     * Layer0 version of @layer0/core.
     * @type {String}
     */
    static get layer0Version(): string;
    /**
     * Copies all of the standard assets into the JS and static asset bundles.  These are the same for any framework.
     */
    build(options?: BuildOptions): Promise<void>;
    /**
     * Adds all configured extra files to the lamdba directory
     */
    includeFiles(): Promise<void>;
    isYarn(): boolean;
    /**
     * Adds all dependencies from package.json to the JS bundle (excluding devDependencies)
     */
    includeNodeModules(): Promise<void>;
    /**
     * Copies the package.json file into the lambda and adjust all dependencies that
     * use file paths
     */
    preparePackageJson(): void;
    /**
     * Configures the TTL for a static asset. Once the TTL has expired, it will be refreshed
     * by forwarding requests for that asset to serverless.
     * @param path The path to the asset within the app
     * @param maxAgeSeconds The TTL in seconds
     * @return A self-reference, suitable for chaining
     */
    setStaticAssetExpiration(path: string, maxAgeSeconds: number, staleWhileRevalidateSeconds: number): this;
    /**
     * Write the manifest for that tells us what static asset routes to configure in the cloud
     * @param router
     */
    private writeStaticAssetManifest;
    /**
     * Writes static asset expiration times so that we can configure them on S3
     */
    private writeStaticAssetExpiration;
    /**
     * Deletes all .map files from specified folder
     */
    deleteMapFiles(dir: string): void;
}
export interface ExecOptions extends shell.ExecOptions {
}
