"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const esbuild_1 = require("esbuild");
const fs_1 = require("../utils/fs");
const path_1 = require("path");
const config_1 = __importDefault(require("../config"));
const logo_1 = __importDefault(require("../utils/logo"));
const paths_1 = require("./paths");
/**
 * Creates a serverless bundle using ESBuild
 * @param options Options for ESBuild
 */
async function bundle(options) {
    // Always exclude fsevents as it cannot be bundled - it's binary.
    const external = ['fsevents'];
    const esBuildDefaults = {
        bundle: true,
        minify: true,
        platform: 'node',
        target: 'node14.0',
        sourcemap: true,
        external,
    };
    await esbuild_1.build({
        ...esBuildDefaults,
        ...options,
    });
}
exports.bundle = bundle;
/**
 * Builds the user's routes and layer0.config files.
 * @param options Options for ESBuild
 */
async function bundleRouterAndConfig(options = {}) {
    const cwd = process.cwd();
    const destDir = path_1.join(process.cwd(), paths_1.JS_DIR);
    const routerPath = path_1.join(process.cwd(), config_1.default.get('routes'));
    const configPath = [path_1.join(cwd, 'layer0.config.js'), path_1.join(cwd, 'layer0.config.cjs')].find(fs_1.existsSync);
    // Use process.stdout.write to be able to concatenate `done.` to the same output line.
    process.stdout.write(`> Bundling ${logo_1.default} router... `);
    if (!configPath) {
        throw new Error('layer0.config.js not found. Run "layer0 init" to create this file.');
    }
    // We keep the original extension for the router since esm requires it when running
    const destRouterName = path_1.basename(routerPath);
    const destRouterPath = path_1.join(destDir, destRouterName);
    // for config: bundle input may be .js|.ts|.cjs but we output to .js
    const destConfigName = path_1.basename(configPath);
    const destConfigPath = path_1.join(destDir, destConfigName.replace(path_1.extname(destConfigName), '.js'));
    await Promise.all([
        bundle({
            ...options,
            entryPoints: [routerPath],
            outfile: destRouterPath,
        }),
        bundle({
            ...options,
            entryPoints: [configPath],
            outfile: destConfigPath,
        }),
    ]);
    process.stdout.write('done.\n');
}
exports.bundleRouterAndConfig = bundleRouterAndConfig;
