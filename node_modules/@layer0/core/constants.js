"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Layer0 configuration file name.
 */
exports.LAYER0_CONFIG_FILE = 'layer0.config.js';
/**
 * Indicate asset files that need to be uploaded under a different
 * bucket key.
 * It contains values like
 * {
 *   '/posts' => '/posts/index.html'
 * }
 */
exports.LAYER0_ASSET_ALIASES_FILE = 'asset-aliases.json';
/**
 * Environment variables used by Layer0.
 */
exports.LAYER0_ENV_VARIABLES = {
    /**
     * Layer0 configuration environment variable key.
     */
    config: 'LAYER0_CONFIG',
    /**
     * Indicates whether code is running locally or in the cloud.
     * @private
     */
    deploymentType: 'LAYER0_DEPLOYMENT_TYPE',
    /**
     * Allows Layer0 development team to easily override Layer0 version
     * during development process.
     * @private
     */
    versionOverride: 'LAYER0_VERSION_OVERRIDE',
};
/**
 * Indicates that code is running in AWS.
 * @private
 */
exports.LAYER0_DEPLOYMENT_TYPE_AWS = 'AWS';
/**
 * Prefix of all Layer0 headers.
 */
exports.LAYER0_HEADERS_PREFIX = 'x-0-';
/**
 * Maximum number of user headers allowed by Layer0 platform.
 *
 * We limit the request and response headers allowed to 70. This is due to a limitation that edge has
 * which at the moment supports up to 96 headers. Edge provider itself needs to use some of those headers
 * with the remainder used by our edge code.
 *
 * NOTE: This constant must be equal ot the constant of the same name defined in Layer0 buffer proxy.
 * NOTE: If this constant is updated then the constant of the same name has to be updated in @layer0/build-lambda module.
 */
exports.LAYER0_MAX_USER_HEADERS_ALLOWED = 70;
/**
 * Status code returned when there are too many request or response headers.
 *
 * Must be equal to HeaderOverflowError status code as defined in build lambda and Layer0 buffer proxy.
 */
exports.LAYER0_TOO_MANY_HEADERS_STATUS_CODE = 542;
/**
 * The status code returned when the layer0_prefetch query param is present and a response could not be found in the cache.
 */
exports.LAYER0_UNCACHED_PREFETCH_STATUS = 412;
/**
 * CDN-as-code configuration actions
 */
exports.ACTIONS = {
    setHeader: 'set-header',
    updateHeader: 'update-header',
    removeHeader: 'remove-header',
    syntheticRes: 'synthetic-response',
    updatePath: 'update-path',
    proxy: 'proxy',
    addCookie: 'add-cookie',
    updateCookie: 'update-cookie',
    removeCookie: 'remove-cookie',
};
/**
 * The backend for cloud functions
 */
exports.BACKENDS = {
    js: '__js__',
    static: '__static__',
    permanentStatic: '__permanent_static__',
    imageOptimizer: '__image_optimizer__',
};
/**
 * The hostname used for the internal service running the user's application.
 */
exports.JS_BACKEND_HOSTNAME = '127.0.0.1';
exports.HTTP_METHODS = {
    head: 'head',
    get: 'get',
    post: 'post',
    delete: 'delete',
    put: 'put',
    patch: 'patch',
    options: 'options',
};
/**
 * Common HTTP headers.
 */
exports.HTTP_HEADERS = {
    authorization: 'authorization',
    acceptEncoding: 'accept-encoding',
    cacheControl: 'cache-control',
    contentEncoding: 'content-encoding',
    contentLength: 'content-length',
    contentType: 'content-type',
    cookie: 'cookie',
    host: 'host',
    location: 'location',
    serverTiming: 'server-timing',
    setCookie: 'set-cookie',
    userAgent: 'user-agent',
    vary: 'vary',
    via: 'via',
    xForwardedFor: 'x-forwarded-for',
    xRequestId: 'x-request-id',
    xSwCacheControl: 'x-sw-cache-control',
    x0Browser: 'x-0-browser',
    x0CacheControl: 'x-0-cache-control',
    x0CachingStatus: 'x-0-caching-status',
    x0ClientIp: 'x-0-client-ip',
    x0Components: 'x-0-components',
    x0Destination: 'x-0-destination',
    x0Device: 'x-0-device',
    x0DeviceIsBot: 'x-0-device-is-bot',
    x0GeoCity: 'x-0-geo-city',
    x0GeoCountryCode: 'x-0-geo-country-code',
    x0GeoLatitude: 'x-0-geo-latitude',
    x0GeoLongitude: 'x-0-geo-longitude',
    x0GeoPostalCode: 'x-0-geo-postal-code',
    x0MatchedRoutes: 'x-0-matched-routes',
    x0Protocol: 'x-0-protocol',
    x0Route: 'x-0-route',
    x0Status: 'x-0-status',
    x0SurrogateKey: 'x-0-surrogate-key',
    x0T: 'x-0-t',
    x0UserT: 'x-0-user-t',
    x0Vendor: 'x-0-vendor',
    x0Version: 'x-0-version',
};
/**
 * Values for x-0-caching-status
 */
exports.CACHING_STATUS = {
    ok: 'ok',
    private: 'private',
    method: 'method',
    bodyTooBig: 'body-too-big',
    code: 'code',
    setCookie: 'set-cookie',
    noMaxAge: 'no-max-age',
};
exports.CACHEABLE_METHODS = new Set(['get', 'head']);
/**
 * When present, this query parameter will cause Layer0 to return a 412 status
 * if a response could not be found in the cache.
 */
exports.THROTTLED_QUERY_PARAM = 'layer0_prefetch';
/**
 * Same value as above but DEPRECATED.
 */
exports.PREFETCH_QUERY_PARAM = exports.THROTTLED_QUERY_PARAM;
/**
 Adds query parameter with custom maxAgeSecond value for service-worker cache if it's specified in PrefetchConfiguration
 */
exports.PREFETCH_TTL_PARAM = 'layer0_prefetch_ttl';
/**
 Labels the request so that devtools will display as prefetched
 */
exports.DEVTOOLS_PREFETCH_QUERY_PARAM = 'layer0_dt_pf';
/**
 * The name of the query parameter used to detect HEAD requests.
 */
exports.HEAD_QUERY_PARAM = 'layer0_head';
/**
 * The name of the query parameter used for the body of POST requests, which is used for the cache key
 */
exports.POST_BODY_QUERY_PARAM = 'pref_layer0_body';
/**
 * The name of the query parameter used for the method of requests, which is used for the cache key
 */
exports.METHOD_QUERY_PARAM = 'pref_layer0_method';
/**
 * Route Group name, which is used in router for fallback routes
 */
exports.ROUTES_FALLBACK = 'fallback';
/**
 * Route Group name, which is used in router for error page routes
 */
exports.ROUTES_CATCH_GROUP = 'catch';
/**
 * Route Group name, which is used in router for noindex routes
 */
exports.ROUTES_NOINDEX_GROUP = 'noindex';
/**
 * The path for the built-in image optimizer.
 */
exports.LAYER0_IMAGE_OPTIMIZER_PATH = '/__layer0_image_optimizer';
/**
 * Is current environment 'browser'
 */
exports.IS_BROWSER = typeof window !== 'undefined';
/**
 * Brotli encoding code.
 */
exports.BROTLI_ENCODING = 'br';
/**
 * Gzip encoding code.
 */
exports.GZIP_ENCODING = 'gzip';
