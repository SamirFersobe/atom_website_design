import BackendOptions from './router/BackendOptions';
export interface EdgeConfig {
    version: string;
    backends: BackendOptions[];
    destinations: EdgeDestination[];
}
export interface EdgeDestination {
    index: number;
    routes: EdgeRule[];
    errorRoutes: EdgeRule[];
}
export interface EdgeRule {
    path?: string;
    matchProtocolJavaScriptRegExpSource?: string;
    match?: (EdgeRegexMatcher | EdgeBodyMatcher)[];
    route?: EdgeRoute;
    cache?: EdgeCacheConfig;
    transform: {
        request: EdgeTransform[];
        upstreamResponse: EdgeTransform[];
        response: EdgeTransform[];
    };
    jwtVerification?: JwtVerification;
}
export interface EdgeRegexMatcher {
    value: string;
    matchRegex: string | null;
}
export interface EdgeBodyMatcher {
    matchBody: string;
}
export interface EdgeRoute {
    action: string;
    statusCode?: number;
    statusMessage?: string;
    backend?: string;
    content?: string;
    fallbackToCompute?: boolean;
    loadingPage?: PathTransform;
    expiresSeconds?: number;
    fsPath?: string[];
    fsExclude?: string[];
    jwtVerification?: JwtVerification;
    disableAutoPublish?: boolean;
}
export interface EdgeCacheConfig {
    disabled?: boolean;
    maxAgeSeconds?: number;
    staleWhileRevalidateSeconds?: number;
    customKey?: any;
    forcePrivateCaching?: boolean;
}
export interface PathTransform {
    valueRegex?: string;
    replaceValue?: string;
}
/**
 * @typedef {number} JwtAlgo
 *
 * JwtAlgos are specified in the "JSON Web Algorithms" RFC #7518
 *
 * @enum
 */
export declare enum JwtAlgo {
    /** HMAC using SHA-256, symmetric */
    HS256 = "HS256",
    /** HMAC using SHA-384, symmetric */
    HS384 = "HS384",
    /** HMAC using SHA-512, symmetric */
    HS512 = "HS512",
    /** RSASSA-PKCS1-v1_5 using SHA-256, asymmetric, RSA */
    RS256 = "RS256",
    /** RSASSA-PKCS1-v1_5 using SHA-384, asymmetric, RSA */
    RS384 = "RS384",
    /** RSASSA-PKCS1-v1_5 using SHA-512, asymmetric, RSA */
    RS512 = "RS512",
    /** ECDSA using P-256 and SHA-256, asymmetric, ECDSA */
    ES256 = "ES256",
    /** ECDSA using P-384 and SHA-384, asymmetric, ECDSA */
    ES384 = "ES384",
    /** ECDSA using P-512 and SHA-512, asymmetric, ECDSA */
    ES512 = "ES512"
}
/**
 * @ignore
 *
 * (See ResponseWriter.VerifyJwtOptions)
 */
export interface JwtVerification {
    algo: JwtAlgo;
    secret: String;
    header?: String;
    cookie?: String;
    redirectExpiredAbsent?: String;
    redirectInvalid?: String;
    returnUrlParamName?: String;
}
export interface EdgeTransform extends PathTransform {
    action: string;
    name?: string;
    value?: string;
}
