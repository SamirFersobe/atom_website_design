"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../constants");
const getMessage_1 = __importDefault(require("../utils/getMessage"));
/**
 * Matches the service-worker cache-control header in the response with an optional duration
 *
 * **Example**
 * ```js
 * expect(response).toBeCachedByTheServiceWorker()
 * ...
 * expect(response).toBeCachedByTheServiceWorker(60*60*24)
 * ```
 *
 * @param {MockResponse} received The mocked response
 * @param {Number} duration Optional - the duration (in seconds) the response is expected to be cached for
 * @returns
 */
function toBeCachedByTheServiceWorker(received, duration) {
    const response = received;
    const request = response.request;
    const header = response.getHeader(constants_1.HTTP_HEADERS.xSwCacheControl);
    let pass = !!header;
    if (header) {
        // @ts-ignore
        if (this.isNot) {
            pass = !/no-cache/.test(header);
            duration = 0;
        }
        else if (pass && duration) {
            pass = new RegExp(`max-age=${duration}`).test(header);
        }
    }
    return {
        message: () => getMessage_1.default(
        // @ts-ignore
        this, `toBeCachedByTheServiceWorker${duration ? 'For' : ''}`, `'${request.path}' [[to]] be cached by the service worker${duration ? ` for ${duration}ms` : ''}`, header),
        pass,
    };
}
exports.toBeCachedByTheServiceWorker = toBeCachedByTheServiceWorker;
exports.toBeCachedByTheServiceWorkerFor = toBeCachedByTheServiceWorker;
