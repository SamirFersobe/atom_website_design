"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const isString_1 = __importDefault(require("../../utils/isString"));
const getMessage_1 = __importDefault(require("../utils/getMessage"));
/**
 * Matches the response header with the passed string or pattern
 *
 * **Example**
 * ```js
 * expect(response).toHaveHeader('x-my-header', 'foo')
 * ...
 * expect(response).toHaveHeader('x-my-header', /foo|bar/)
 * ```
 *
 * @param {MockResponse} received The mocked response
 * @param {String} name The name of the header
 * @param {String|RegExp} [value] The value or pattern to match
 * @returns
 */
function toHaveHeader(received, name, value) {
    const response = received;
    const request = response.request;
    const header = response.getHeader(name);
    let pass = !!header;
    if (header && value) {
        if (isString_1.default(value)) {
            pass = header === value;
        }
        else {
            pass = value.test(header);
        }
    }
    return {
        message: () => getMessage_1.default(
        // @ts-ignore
        this, `toHaveHeader`, `'${request.path}' [[to]] have header ${name}${value ? `=${value}` : ''}`, header),
        pass,
    };
}
exports.toHaveHeader = toHaveHeader;
