/**
 * This module provides a context that can be used to store request
 * state. For example, accumulating timing metrics from various layers
 * during the life of the request.
 */
declare global {
    module NodeJS {
        interface Global {
            __layer0_timings__: SingletonContext;
        }
    }
}
/**
 * Runs the specified callback within the specified context
 * @param cb
 */
export declare function withContext(cb: () => Promise<any>): any;
/**
 * Gets a value from the current context
 * @param key The name of the variable to get
 * @param defaultValue A default value to set and return if no value is found.
 */
export declare function get(key: string, defaultValue: any): any;
/**
 * Sets a value on the current context
 * @param key The variable to set
 * @param value The value to store
 */
export declare function set(key: string, value: any): void;
/**
 *
 */
declare class SingletonContext {
    values: any;
    get(key: string): any;
    set(key: string, value: any): void;
}
export {};
